import React, { useState, useEffect } from "react";
import { useHistory, useParams } from "react-router-dom";

export default function SeatReservation({ reservations, tables }) {
  const history = useHistory();

  // here are the states we need to keep track of
  const [tableId, setTableId] = useState(0);
  const [errors, setErrors] = useState([]);

  const { reservation_id } = useParams();

  // in case the props passed in don't exist
  if (!tables || !reservations) return null;

  // records changes in keystroke and sets the values for tableId
  function handleChange({ target }) {
    setTableId(target.value);
  }

  // submit handler
  function handleSubmit(event) {
    event.preventDefault();

    // uses validation function if the seat is correct
    if (validateSeat()) {
      history.push(`/dashboard`);
    }
  }

  // checks if table assigned is valid
  function validateSeat() {
    const foundErrors = [];

    // we will need to use the find method here to get the actual table/reservation objects from their ids
    const foundTable = tables.find((table) => table.table_id === tableId);
    const foundReservation = reservations.find(
      (reservation) => reservation.reservation_id === reservation_id
    );

    if (!foundTable) {
      foundErrors.push("The table you selected does not exist.");
    } else if (!foundReservation) {
      foundErrors.push("This reservation does not exist.");
    } else {
      if (foundTable.status === "occupied") {
        foundErrors.push("The table you selected is currently occupied.");
      }

      if (foundTable.capacity < foundReservation.people) {
        foundErrors.push(
          `The table you selected cannot seat ${foundReservation.people} people.`
        );
      }
    }

    setErrors(foundErrors);

    // this conditional will either return true or false based off of whether foundErrors is equal to 0
    // return foundErrors.length === 0;

    if (foundErrors.length > 0) {
      return false;
    }
    return true;
  }

  const tableOptionsBodyDisplay = () => {
    return tables.map((table) => (
      <option value={table.table_id}>
        {table.table_name} - {table.capacity}
      </option>
    ));
  };

  return (
    <form>
      <label htmlFor="table_id">Choose table:</label>
      <select
        name="table_id"
        id="table_id"
        value={tableId}
        onChange={handleChange}
      >
        {tableOptionsBodyDisplay()}
      </select>

      <button type="submit" onClick={handleSubmit}>
        Submit
      </button>
      <button type="button" onClick={history.goBack}>
        Cancel
      </button>
    </form>
  );
}
